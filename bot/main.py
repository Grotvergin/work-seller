from bot.source import *


def main():
    polling_thr = Thread(target=Polling)
    time_thr = Thread(target=Timetable)
    polling_thr.start()
    time_thr.start()
    polling_thr.join()
    time_thr.join()


def Polling():
    while True:
        try:
            bot.polling(none_stop=True, interval=1)
        except Exception as e:
            Stamp(str(e), 'e')


def Timetable():
    while True:
        time.sleep(1)
        if datetime.now().strftime('%M:%S') == TIME_CHECKER:
            Stamp('Time for checker message', 'i')
            SendMessageAll(PATH_TO_DB, PrepareChecker())
        elif datetime.now().strftime('%H:%M:%S') == TIME_REPORT:
            Stamp('Time for report message', 'i')
            date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            SendMessageAll(PATH_TO_DB, f'üü¢ –û—Ç–æ–±—Ä–∞–∂–∞—é –æ—Ç—á—ë—Ç –∑–∞ {date}')
            SendMessageAll(PATH_TO_DB, PrepareReport(date[8:10]))


def CallbackStart(message):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=False)
    btn_report = telebot.types.KeyboardButton('–û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ üìä')
    btn_sub = telebot.types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ')
    btn_stop = telebot.types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚ùå')
    markup.row(btn_report)
    markup.row(btn_sub, btn_stop)
    bot.send_message(message.from_user.id, '/sub ‚Äì –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n'
                                           '/stop ‚Äì –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
                                           '/report ‚Äì –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ', reply_markup=markup)


def CallbackSub(user: int):
    Stamp(f'User {user} requested /sub', 'i')
    if AddToDatabase(user, PATH_TO_DB):
        SendMessage(user, 'üü° –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    else:
        SendMessage(user, 'üü¢ –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á—ë–Ω')


def CallbackStop(user: int):
    Stamp(f'User {user} requested /stop', 'i')
    if RemoveFromDatabase(user, PATH_TO_DB):
        SendMessage(user, 'üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –í–∞—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    else:
        SendMessage(user, 'üü° –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')


def VerifyDate(day: str):
    try:
        datetime(datetime.now().year, datetime.now().month, int(day))
        return True
    except ValueError:
        return False


def CallbackReport(message):
    user = message.from_user.id
    body = message.text.lower()
    if not VerifyDate(body):
        SendMessage(user, 'üî¥ –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –¥–∞—Ç–µ')
    else:
        SendMessage(user, f"üü¢ –û—Ç–æ–±—Ä–∞–∂–∞—é –æ—Ç—á—ë—Ç –∑–∞ {datetime(datetime.now().year, datetime.now().month, int(body)).strftime('%Y-%m-%d')}")
        SendMessage(user, PrepareReport(body))


def AddToDatabase(user: int, path: str):
    Stamp(f'Adding user {user} to DB', 'i')
    found = False
    with open(Path.cwd() / path, 'r') as f:
        for line in f:
            if int(line.strip()) == user:
                found = True
                break
    if not found:
        with open(Path.cwd() / path, 'a') as f:
            f.write(str(user) + '\n')
    return found


def RemoveFromDatabase(user: int, path: str):
    Stamp(f'Removing user {user} from DB', 'i')
    found = False
    with open(Path.cwd() / path, 'r') as f:
        lines = f.readlines()
    for line in lines:
        if int(line.strip()) == user:
            found = True
            break
    if found:
        with open(Path.cwd() / path, 'w') as f:
            for line in lines:
                if int(line.strip()) != user:
                    f.write(line)
    return found


def SendMessage(user: int, msg: Union[str, list[str]]):
    Stamp(f'Sending message to user {user}', 'i')
    if isinstance(msg, str):
        bot.send_message(user, msg, parse_mode='Markdown')
    elif msg:
        for m in msg:
            bot.send_message(user, m, parse_mode='Markdown')
    else:
        bot.send_message(user, '‚ñ™Ô∏è–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π', parse_mode='Markdown')


def SendMessageAll(path: str, msg: Union[str, list[str]]):
    Stamp('Sending message to all users', 'i')
    with open(Path.cwd() / path, 'r') as f:
        users = f.readlines()
    for user in users:
        SendMessage(int(user), msg)


@bot.message_handler(content_types=['text'])
def MessageAccept(message):
    user = message.from_user.id
    body = message.text.lower()
    Stamp(f'Got message from user {user} ‚Äì {body}', 'i')
    match body:
        case '/start':
            SendMessage(user, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!')
            CallbackStart(message)
        case '/sub' | '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ':
            CallbackSub(user)
        case '/stop' | '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚ùå':
            CallbackStop(user)
        case '/report' | '–æ—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ üìä':
            SendMessage(user, '‚ùî –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:')
            bot.register_next_step_handler(message, CallbackReport)
        case _:
            SendMessage(user, 'üî¥ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
            CallbackStart(message)


if __name__ == '__main__':
    main()
